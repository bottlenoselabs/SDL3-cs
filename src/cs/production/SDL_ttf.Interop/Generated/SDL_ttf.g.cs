// <auto-generated>
//  This code was generated by the following tool on 2025-08-13 04:15:56 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v2025.7.22.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template

#pragma warning disable CS1591
#pragma warning disable CS8981
using Interop.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

#endregion

using static bottlenoselabs.Interop.SDL;


namespace bottlenoselabs.Interop;

public static unsafe partial class SDL_ttf
{
    private const string LibraryName = "SDL3_ttf";

    [LibraryImport(LibraryName, EntryPoint = "TTF_AddFallbackFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_AddFallbackFont(TTF_Font* font, TTF_Font* fallback);

    [LibraryImport(LibraryName, EntryPoint = "TTF_AppendTextString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_AppendTextString(TTF_Text* text, CString @string, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_ClearFallbackFonts")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_ClearFallbackFonts(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CloseFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_CloseFont(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CopyFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Font* TTF_CopyFont(TTF_Font* existing_font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateGPUTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_CreateGPUTextEngine(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateGPUTextEngineWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_CreateGPUTextEngineWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateRendererTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_CreateRendererTextEngine(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateRendererTextEngineWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_CreateRendererTextEngineWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateSurfaceTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_CreateSurfaceTextEngine();

    [LibraryImport(LibraryName, EntryPoint = "TTF_CreateText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Text* TTF_CreateText(TTF_TextEngine* engine, TTF_Font* font, CString text, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DeleteTextString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_DeleteTextString(TTF_Text* text, int offset, int length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DestroyGPUTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_DestroyGPUTextEngine(TTF_TextEngine* engine);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DestroyRendererTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_DestroyRendererTextEngine(TTF_TextEngine* engine);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DestroySurfaceTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_DestroySurfaceTextEngine(TTF_TextEngine* engine);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DestroyText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_DestroyText(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DrawRendererText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_DrawRendererText(TTF_Text* text, float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "TTF_DrawSurfaceText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_DrawSurfaceText(TTF_Text* text, int x, int y, SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "TTF_FontHasGlyph")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_FontHasGlyph(TTF_Font* font, uint ch);

    [LibraryImport(LibraryName, EntryPoint = "TTF_FontIsFixedWidth")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_FontIsFixedWidth(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_FontIsScalable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_FontIsScalable(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontAscent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontAscent(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontCharSpacing")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontCharSpacing(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontDescent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontDescent(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontDirection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Direction TTF_GetFontDirection(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontDPI")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetFontDPI(TTF_Font* font, int* hdpi, int* vdpi);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontFamilyName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString TTF_GetFontFamilyName(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontGeneration")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint TTF_GetFontGeneration(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontHeight")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontHeight(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontHinting")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_HintingFlags TTF_GetFontHinting(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontKerning")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetFontKerning(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontLineSkip")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontLineSkip(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontOutline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontOutline(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID TTF_GetFontProperties(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontScript")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint TTF_GetFontScript(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontSDF")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetFontSDF(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float TTF_GetFontSize(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontStyle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_FontStyleFlags TTF_GetFontStyle(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontStyleName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString TTF_GetFontStyleName(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontWeight")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetFontWeight(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFontWrapAlignment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_HorizontalAlignment TTF_GetFontWrapAlignment(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetFreeTypeVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_GetFreeTypeVersion(int* major, int* minor, int* patch);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGlyphImage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_GetGlyphImage(TTF_Font* font, uint ch, TTF_ImageType* image_type);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGlyphImageForIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_GetGlyphImageForIndex(TTF_Font* font, uint glyph_index, TTF_ImageType* image_type);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGlyphKerning")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetGlyphKerning(TTF_Font* font, uint previous_ch, uint ch, int* kerning);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGlyphMetrics")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetGlyphMetrics(TTF_Font* font, uint ch, int* minx, int* maxx, int* miny, int* maxy, int* advance);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGlyphScript")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint TTF_GetGlyphScript(uint ch);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGPUTextDrawData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_GPUAtlasDrawSequence* TTF_GetGPUTextDrawData(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetGPUTextEngineWinding")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_GPUTextEngineWinding TTF_GetGPUTextEngineWinding(TTF_TextEngine* engine);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetHarfBuzzVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_GetHarfBuzzVersion(int* major, int* minor, int* patch);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetNextTextSubString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetNextTextSubString(TTF_Text* text, TTF_SubString* substring, TTF_SubString* next);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetNumFontFaces")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_GetNumFontFaces(TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetPreviousTextSubString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetPreviousTextSubString(TTF_Text* text, TTF_SubString* substring, TTF_SubString* previous);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetStringSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetStringSize(TTF_Font* font, CString text, ulong length, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetStringSizeWrapped")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetStringSizeWrapped(TTF_Font* font, CString text, ulong length, int wrap_width, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextColor(TTF_Text* text, byte* r, byte* g, byte* b, byte* a);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextColorFloat(TTF_Text* text, float* r, float* g, float* b, float* a);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextDirection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Direction TTF_GetTextDirection(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_TextEngine* TTF_GetTextEngine(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Font* TTF_GetTextFont(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextPosition(TTF_Text* text, int* x, int* y);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID TTF_GetTextProperties(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextScript")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint TTF_GetTextScript(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextSize(TTF_Text* text, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextSubString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextSubString(TTF_Text* text, int offset, TTF_SubString* substring);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextSubStringForLine", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextSubStringForLine(TTF_Text* text, int line, TTF_SubString* substring);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextSubStringForPoint", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextSubStringForPoint(TTF_Text* text, int x, int y, TTF_SubString* substring);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextSubStringsForRange")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_SubString** TTF_GetTextSubStringsForRange(TTF_Text* text, int offset, int length, int* count);

    [LibraryImport(LibraryName, EntryPoint = "TTF_GetTextWrapWidth")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_GetTextWrapWidth(TTF_Text* text, int* wrap_width);

    [LibraryImport(LibraryName, EntryPoint = "TTF_Init")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_Init();

    [LibraryImport(LibraryName, EntryPoint = "TTF_InsertTextString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_InsertTextString(TTF_Text* text, int offset, CString @string, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_MeasureString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_MeasureString(TTF_Font* font, CString text, ulong length, int max_width, int* measured_width, ulong* measured_length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_OpenFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Font* TTF_OpenFont(CString file, float ptsize);

    [LibraryImport(LibraryName, EntryPoint = "TTF_OpenFontIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Font* TTF_OpenFontIO(SDL_IOStream* src, CBool closeio, float ptsize);

    [LibraryImport(LibraryName, EntryPoint = "TTF_OpenFontWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial TTF_Font* TTF_OpenFontWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "TTF_Quit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_Quit();

    [LibraryImport(LibraryName, EntryPoint = "TTF_RemoveFallbackFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_RemoveFallbackFont(TTF_Font* font, TTF_Font* fallback);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderGlyph_Blended")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderGlyph_Blended(TTF_Font* font, uint ch, Rgba8U fg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderGlyph_LCD")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderGlyph_LCD(TTF_Font* font, uint ch, Rgba8U fg, Rgba8U bg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderGlyph_Shaded")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderGlyph_Shaded(TTF_Font* font, uint ch, Rgba8U fg, Rgba8U bg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderGlyph_Solid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderGlyph_Solid(TTF_Font* font, uint ch, Rgba8U fg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Blended")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Blended(TTF_Font* font, CString text, ulong length, Rgba8U fg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Blended_Wrapped")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Blended_Wrapped(TTF_Font* font, CString text, ulong length, Rgba8U fg, int wrap_width);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_LCD")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_LCD(TTF_Font* font, CString text, ulong length, Rgba8U fg, Rgba8U bg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_LCD_Wrapped")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_LCD_Wrapped(TTF_Font* font, CString text, ulong length, Rgba8U fg, Rgba8U bg, int wrap_width);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Shaded")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Shaded(TTF_Font* font, CString text, ulong length, Rgba8U fg, Rgba8U bg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Shaded_Wrapped")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Shaded_Wrapped(TTF_Font* font, CString text, ulong length, Rgba8U fg, Rgba8U bg, int wrap_width);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Solid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Solid(TTF_Font* font, CString text, ulong length, Rgba8U fg);

    [LibraryImport(LibraryName, EntryPoint = "TTF_RenderText_Solid_Wrapped")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* TTF_RenderText_Solid_Wrapped(TTF_Font* font, CString text, ulong length, Rgba8U fg, int wrapLength);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontCharSpacing")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontCharSpacing(TTF_Font* font, int spacing);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontDirection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontDirection(TTF_Font* font, TTF_Direction direction);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontHinting")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetFontHinting(TTF_Font* font, TTF_HintingFlags hinting);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontKerning")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetFontKerning(TTF_Font* font, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontLanguage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontLanguage(TTF_Font* font, CString language_bcp47);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontLineSkip")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetFontLineSkip(TTF_Font* font, int lineskip);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontOutline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontOutline(TTF_Font* font, int outline);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontScript")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontScript(TTF_Font* font, uint script);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontSDF")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontSDF(TTF_Font* font, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontSize(TTF_Font* font, float ptsize);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontSizeDPI")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetFontSizeDPI(TTF_Font* font, float ptsize, int hdpi, int vdpi);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontStyle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetFontStyle(TTF_Font* font, TTF_FontStyleFlags style);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetFontWrapAlignment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetFontWrapAlignment(TTF_Font* font, TTF_HorizontalAlignment align);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetGPUTextEngineWinding")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_SetGPUTextEngineWinding(TTF_TextEngine* engine, TTF_GPUTextEngineWinding winding);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextColor(TTF_Text* text, byte r, byte g, byte b, byte a);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextColorFloat(TTF_Text* text, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextDirection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextDirection(TTF_Text* text, TTF_Direction direction);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextEngine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextEngine(TTF_Text* text, TTF_TextEngine* engine);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextFont")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextFont(TTF_Text* text, TTF_Font* font);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextPosition(TTF_Text* text, int x, int y);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextScript")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextScript(TTF_Text* text, uint script);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextString(TTF_Text* text, CString @string, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextWrapWhitespaceVisible")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextWrapWhitespaceVisible(TTF_Text* text, CBool visible);

    [LibraryImport(LibraryName, EntryPoint = "TTF_SetTextWrapWidth")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_SetTextWrapWidth(TTF_Text* text, int wrap_width);

    [LibraryImport(LibraryName, EntryPoint = "TTF_StringToTag", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint TTF_StringToTag(CString @string);

    [LibraryImport(LibraryName, EntryPoint = "TTF_TagToString", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void TTF_TagToString(uint tag, CString @string, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "TTF_TextWrapWhitespaceVisible")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_TextWrapWhitespaceVisible(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_UpdateText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool TTF_UpdateText(TTF_Text* text);

    [LibraryImport(LibraryName, EntryPoint = "TTF_Version")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_Version();

    [LibraryImport(LibraryName, EntryPoint = "TTF_WasInit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int TTF_WasInit();

    public static readonly int TTF_FONT_WEIGHT_BLACK = (int)900;

    public static readonly int TTF_FONT_WEIGHT_BOLD = (int)700;

    public static readonly int TTF_FONT_WEIGHT_EXTRA_BLACK = (int)950;

    public static readonly int TTF_FONT_WEIGHT_EXTRA_BOLD = (int)800;

    public static readonly int TTF_FONT_WEIGHT_EXTRA_LIGHT = (int)200;

    public static readonly int TTF_FONT_WEIGHT_LIGHT = (int)300;

    public static readonly int TTF_FONT_WEIGHT_MEDIUM = (int)500;

    public static readonly int TTF_FONT_WEIGHT_NORMAL = (int)400;

    public static readonly int TTF_FONT_WEIGHT_SEMI_BOLD = (int)600;

    public static readonly int TTF_FONT_WEIGHT_THIN = (int)100;

    public static readonly CString TTF_PROP_FONT_CREATE_EXISTING_FONT_POINTER = (CString)"SDL_ttf.font.create.existing_font"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_FACE_NUMBER = (CString)"SDL_ttf.font.create.face"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_FILENAME_STRING = (CString)"SDL_ttf.font.create.filename"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER = (CString)"SDL_ttf.font.create.hdpi"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN = (CString)"SDL_ttf.font.create.iostream.autoclose"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER = (CString)"SDL_ttf.font.create.iostream.offset"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_IOSTREAM_POINTER = (CString)"SDL_ttf.font.create.iostream"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_SIZE_FLOAT = (CString)"SDL_ttf.font.create.size"u8;

    public static readonly CString TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER = (CString)"SDL_ttf.font.create.vdpi"u8;

    public static readonly CString TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER = (CString)"SDL_ttf.font.outline.line_cap"u8;

    public static readonly CString TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER = (CString)"SDL_ttf.font.outline.line_join"u8;

    public static readonly CString TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER = (CString)"SDL_ttf.font.outline.miter_limit"u8;

    public static readonly CString TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE_NUMBER = (CString)"SDL_ttf.gpu_text_engine.create.atlas_texture_size"u8;

    public static readonly CString TTF_PROP_GPU_TEXT_ENGINE_DEVICE_POINTER = (CString)"SDL_ttf.gpu_text_engine.create.device"u8;

    public static readonly CString TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE_NUMBER = (CString)"SDL_ttf.renderer_text_engine.create.atlas_texture_size"u8;

    public static readonly CString TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER_POINTER = (CString)"SDL_ttf.renderer_text_engine.create.renderer"u8;

    public static readonly int TTF_STYLE_BOLD = (int)1;

    public static readonly int TTF_STYLE_ITALIC = (int)2;

    public static readonly int TTF_STYLE_NORMAL = (int)0;

    public static readonly int TTF_STYLE_STRIKETHROUGH = (int)8;

    public static readonly int TTF_STYLE_UNDERLINE = (int)4;

    public static readonly int TTF_SUBSTRING_DIRECTION_MASK = (int)255;

    public static readonly int TTF_SUBSTRING_LINE_END = (int)1024;

    public static readonly int TTF_SUBSTRING_LINE_START = (int)512;

    public static readonly int TTF_SUBSTRING_TEXT_END = (int)2048;

    public static readonly int TTF_SUBSTRING_TEXT_START = (int)256;

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct TTF_GPUAtlasDrawSequence
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* atlas_texture; // size = 8

        [FieldOffset(8)]
        public SDL_FPoint* xy; // size = 8

        [FieldOffset(16)]
        public SDL_FPoint* uv; // size = 8

        [FieldOffset(24)]
        public int num_vertices; // size = 4

        [FieldOffset(32)]
        public int* indices; // size = 8

        [FieldOffset(40)]
        public int num_indices; // size = 4

        [FieldOffset(44)]
        public TTF_ImageType image_type; // size = 4

        [FieldOffset(48)]
        public TTF_GPUAtlasDrawSequence* next; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public partial struct TTF_SubString
    {
        [FieldOffset(0)]
        public TTF_SubStringFlags flags; // size = 4

        [FieldOffset(4)]
        public int offset; // size = 4

        [FieldOffset(8)]
        public int length; // size = 4

        [FieldOffset(12)]
        public int line_index; // size = 4

        [FieldOffset(16)]
        public int cluster_index; // size = 4

        [FieldOffset(20)]
        public SDL_Rect rect; // size = 16
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct TTF_Text
    {
        [FieldOffset(0)]
        public CString text; // size = 8

        [FieldOffset(8)]
        public int num_lines; // size = 4

        [FieldOffset(12)]
        public int refcount; // size = 4

        [FieldOffset(16)]
        public TTF_TextData* @internal; // size = 8
    }

    public enum TTF_Direction : int
    {
        TTF_DIRECTION_INVALID = 0,
        TTF_DIRECTION_LTR = 4,
        TTF_DIRECTION_RTL = 5,
        TTF_DIRECTION_TTB = 6,
        TTF_DIRECTION_BTT = 7
    }

    public enum TTF_GPUTextEngineWinding : int
    {
        TTF_GPU_TEXTENGINE_WINDING_INVALID = -1,
        TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE = 0,
        TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE = 1
    }

    public enum TTF_HintingFlags : int
    {
        TTF_HINTING_INVALID = -1,
        TTF_HINTING_NORMAL = 0,
        TTF_HINTING_LIGHT = 1,
        TTF_HINTING_MONO = 2,
        TTF_HINTING_NONE = 3,
        TTF_HINTING_LIGHT_SUBPIXEL = 4
    }

    public enum TTF_HorizontalAlignment : int
    {
        TTF_HORIZONTAL_ALIGN_INVALID = -1,
        TTF_HORIZONTAL_ALIGN_LEFT = 0,
        TTF_HORIZONTAL_ALIGN_CENTER = 1,
        TTF_HORIZONTAL_ALIGN_RIGHT = 2
    }

    public enum TTF_ImageType : int
    {
        TTF_IMAGE_INVALID = 0,
        TTF_IMAGE_ALPHA = 1,
        TTF_IMAGE_COLOR = 2,
        TTF_IMAGE_SDF = 3
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct TTF_Font
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct TTF_TextData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct TTF_TextEngine
    {
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct TTF_FontStyleFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(TTF_FontStyleFlags data) => data.Data;
        public static implicit operator TTF_FontStyleFlags(uint data) => new TTF_FontStyleFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct TTF_SubStringFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(TTF_SubStringFlags data) => data.Data;
        public static implicit operator TTF_SubStringFlags(uint data) => new TTF_SubStringFlags() { Data = data };
    }
}


